package zx9.web.controller;

import java.security.Provider;
import java.security.Security;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		System.out.println("hello");
		model.addAttribute("serverTime", formattedDate );
		
		return "home";
	}
	@RequestMapping("/test")
	public void test() {
		Security.addProvider(new BouncyCastleProvider());
		PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor(); 
		encryptor.setPassword("somePassword"); encryptor.setAlgorithm("PBEWITHSHA256AND128BITAES-CBC-BC");

		//StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor(); 
	//	encryptor.setPassword("somePassword"); encryptor.setAlgorithm("PBEWithMD5AndDES");
		String str = "testString"; String encStr = encryptor.encrypt(str); String decStr = encryptor.decrypt(encStr);
		log.debug("str :"+str+", encStr : "+encStr+" decStr :"+decStr);

		
		
		
		System.out.println("hi");
		Provider provider = Security.getProvider("BC");
		  if (provider != null){
		   System.out.println("Bouncy Castle provider is available");
		   System.out.println(provider.getInfo());
		  } else {
		   System.out.println("Bouncy Castle provider is NOT available");
		  }
		  
		
	}
	@RequestMapping("/index")
	public String index() {
		
		return "template/index";
	}
	@RequestMapping("/a")
	public String instructor() {
		return "template/a";
	}
	@RequestMapping("/b")
	public String lecture() {
		return "template/b";
	}
	@RequestMapping("/bc")
	public void bc(){
		
	}
	
}
